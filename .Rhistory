# Load population data (skip first 4 metadata rows)
population <- read.csv("C:/Users/errmi/Desktop/MPSL/API_SP.POP.TOTL_DS2_en_csv_v2_26346.csv", skip = 4)
# See the first few rows of each dataset
head(athletes)
head(gdp)
head(population)
# Also check dimensions
dim(athletes)
dim(gdp)
dim(population)
# Remove the columns: Season, Games , Event
athletes_clean <- athletes[, !(names(athletes) %in% c("Season", "Games", "Event"))]
# Check the result
head(athletes_clean)
library(tidyverse)
library(readr)
# GDP long format
gdp_long <- gdp %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "GDP") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Population long format
pop_long <- population %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Population") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Preview
head(gdp_long)
head(pop_long)
# Step 1: Copy the clean athlete dataset
athletes_merged <- athletes_clean
# Step 2: Rename columns to match for join
athletes_merged <- athletes_merged %>%
rename(Country = Team) %>%
mutate(Year = as.integer(Year)) # Ensure Year is integer for join
# Step 3: Join GDP and Population by Country + Year
athletes_merged <- athletes_merged %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year"))
# Step 4: Check result
head(athletes_merged)
library(ggplot2)
library(dplyr)
# Filter only athletes who won medals
medals_data <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
Population = first(Population), # Assuming same for country-year
GDP = first(GDP)
) %>%
ungroup()
# Plot 1: Medals vs. Population
ggplot(medals_data, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "steelblue") +
scale_x_log10(labels = scales::comma) +
labs(
title = "Olympic Medals vs. Population",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal()
# Plot 2: Medals vs. GDP
ggplot(medals_data, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "darkorange") +
scale_x_log10(labels = scales::dollar_format()) +
labs(
title = "Olympic Medals vs. GDP per Capita",
x = "GDP per Capita (log scale)",
y = "Total Medals"
) +
theme_minimal()
library(dplyr)
library(ggplot2)
# Group medals per Country-Year
medals_data <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
Population = first(Population),
GDP = first(GDP)
) %>%
ungroup()
# Create GDP and Population quantile groups (e.g., low, medium, high)
medals_data <- medals_data %>%
mutate(
GDP_Group = ntile(GDP, 4),         # Quartiles for GDP
Population_Group = ntile(Population, 4)  # Quartiles for Pop
)
# Replace group numbers with labels
gdp_labels <- c("Low GDP", "Mid-low GDP", "Mid-high GDP", "High GDP")
pop_labels <- c("Low Pop", "Mid-low Pop", "_
library(dplyr)
library(ggplot2)
# Group medals per Country-Year
medals_data <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
Population = first(Population),
GDP = first(GDP)
) %>%
ungroup()
# Create GDP and Population quantile groups (e.g., low, medium, high)
medals_data <- medals_data %>%
mutate(
GDP_Group = ntile(GDP, 4),         # Quartiles for GDP
Population_Group = ntile(Population, 4)  # Quartiles for Pop
)
# Replace group numbers with labels
gdp_labels <- c("Low GDP", "Mid-low GDP", "Mid-high GDP", "High GDP")
pop_labels <- c("Low Pop", "Mid-low Pop", "Mid-high Pop", "High Pop")
medals_data$GDP_Group <- factor(medals_data$GDP_Group, labels = gdp_labels)
medals_data$Population_Group <- factor(medals_data$Population_Group, labels = pop_labels)
# Boxplot: Medals by GDP group
ggplot(medals_data, aes(x = GDP_Group, y = Total_Medals, fill = GDP_Group)) +
geom_boxplot() +
labs(
title = "Total Olympic Medals by GDP Group",
x = "GDP Group (Per Capita)",
y = "Total Medals"
) +
theme_minimal() +
theme(legend.position = "none")
# Boxplot: Medals by Population group
ggplot(medals_data, aes(x = Population_Group, y = Total_Medals, fill = Population_Group)) +
geom_boxplot() +
labs(
title = "Total Olympic Medals by Population Group",
x = "Population Group",
y = "Total Medals"
) +
theme_minimal() +
theme(legend.position = "none")
library(ggplot2)
# Filter for medal winners with GDP and Population data
medal_countries <- athletes_merged %>%
filter(!is.na(Medal), !is.na(GDP), !is.na(Population)) %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
GDP = first(GDP),
Population = first(Population)
) %>%
ungroup()
# Histogram: GDP
ggplot(medal_countries, aes(x = GDP)) +
geom_histogram(bins = 30, fill = "#0073C2FF", color = "white") +
scale_x_log10() +
labs(
title = "Distribution of GDP per Capita among Medal-Winning Countries",
x = "GDP per Capita (log scale)",
y = "Count of Country-Year Medal Winners"
) +
theme_minimal()
# Histogram: Population
ggplot(medal_countries, aes(x = Population)) +
geom_histogram(bins = 30, fill = "#EFC000FF", color = "white") +
scale_x_log10() +
labs(
title = "Distribution of Population among Medal-Winning Countries",
x = "Population (log scale)",
y = "Count of Country-Year Medal Winners"
) +
theme_minimal()
library(ggplot2)
# Group medal data by country-year
medal_gdp_curve <- athletes_merged %>%
filter(!is.na(Medal), !is.na(GDP)) %>%
group_by(Country, Year, GDP) %>%
summarise(Total_Medals = n(), .groups = "drop")
# Plot GDP vs Total Medals
ggplot(medal_gdp_curve, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.5, color = "#0073C2FF") +
geom_smooth(method = "loess", se = TRUE, color = "darkblue") +
scale_x_log10() +
labs(
title = "Relation between GDP per Capita and Olympic Medal Count",
x = "GDP per Capita (log scale)",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
# Group medal data by country-year
medal_pop_curve <- athletes_merged %>%
filter(!is.na(Medal), !is.na(Population)) %>%
group_by(Country, Year, Population) %>%
summarise(Total_Medals = n(), .groups = "drop")
# Plot Population vs Total Medals
ggplot(medal_pop_curve, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.5, color = "#EFC000FF") +
geom_smooth(method = "loess", se = TRUE, color = "darkorange") +
scale_x_log10() +
labs(
title = "Relation between Population and Olympic Medal Count",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
# Filter and count medals by type per country-year
medal_type_gdp <- athletes_merged %>%
filter(!is.na(Medal), !is.na(GDP)) %>%
group_by(Country, Year, GDP, Medal) %>%
summarise(Medal_Count = n(), .groups = "drop")
# Plot: GDP vs Medal Count per Type
ggplot(medal_type_gdp, aes(x = GDP, y = Medal_Count, color = Medal)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "loess", se = FALSE) +
scale_x_log10() +
facet_wrap(~Medal) +
labs(
title = "GDP per Capita vs Olympic Medals by Type",
x = "GDP per Capita (log scale)",
y = "Medal Count"
) +
theme_minimal()
library(ggplot2)
ggplot(medal_type_gdp, aes(x = GDP, y = Medal_Count, color = Medal)) +
geom_point(alpha = 0.3, size = 1.8) +  # Smaller, transparent points
geom_smooth(method = "loess", se = FALSE, size = 2) +  # Thicker trend line
scale_x_log10(labels = scales::dollar_format(scale = 1e-3, suffix = "k")) +
scale_y_continuous(expand = expansion(mult = c(0, 0.05))) +
facet_wrap(~Medal) +
labs(
title = "GDP per Capita vs Olympic Medals by Type",
x = "GDP per Capita (log scale)",
y = "Medal Count"
) +
theme_minimal(base_size = 15) +
theme(
legend.position = "none",
strip.text = element_text(size = 18, face = "bold"),
plot.title = element_text(size = 20, face = "bold", hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1)
)
library(ggplot2)
total_medals <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country, Year, GDP, Population) %>%
summarise(Total_Medals = n(), .groups = "drop")
ggplot(total_medals, aes(x = as.factor(Year), y = Total_Medals)) +
geom_boxplot(outlier.shape = NA, fill = "skyblue", alpha = 0.5) +
geom_jitter(aes(color = GDP), width = 0.2, alpha = 0.7, size = 1.5) +
scale_color_viridis_c(option = "C") +
labs(
title = "Total Olympic Medals per Country vs Year (Colored by GDP)",
x = "Year",
y = "Total Medals"
) +
theme_minimal(base_size = 14) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(face = "bold", hjust = 0.5)
)
library(dplyr)
library(ggplot2)
# 1. Filter athletes who won medals (Gold/Silver/Bronze)
medals_data <- athletes_merged %>%
filter(Medal %in% c("Gold", "Silver", "Bronze"))
# 2. Group by Country and Year to count total medals, and attach GDP
medals_summary <- medals_data %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
GDP = mean(GDP, na.rm = TRUE)
) %>%
ungroup()
# 3. Cut GDP into ranges (optional: adjust bins if needed)
medals_summary <- medals_summary %>%
mutate(GDP_Range = cut(GDP,
breaks = c(0, 1000, 5000, 10000, 25000, 50000, 100000, Inf),
labels = c("≤1k", "1k–5k", "5k–10k", "10k–25k", "25k–50k", "50k–100k", ">100k"),
include.lowest = TRUE))
# 4. Boxplot: Medal distribution by GDP category
ggplot(medals_summary, aes(x = GDP_Range, y = Total_Medals, fill = GDP_Range)) +
geom_boxplot() +
labs(
title = "Total Olympic Medals per Country by GDP Range",
x = "GDP per Capita Range (USD)",
y = "Total Medals"
) +
theme_minimal() +
theme(legend.position = "none",
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12))
library(dplyr)
library(ggplot2)
# Filter out NA GDP
medals_clean <- medals_summary %>%
filter(!is.na(GDP))
# Scatter plot with smooth trend line
ggplot(medals_clean, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkred", size = 1.2) +
scale_x_log10() +
labs(
title = "Relationship between GDP per Capita and Total Olympic Medals",
x = "GDP per Capita (log scale)",
y = "Total Medals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
# Filter out NA Population
medals_clean_pop <- medals_summary %>%
filter(!is.na(Population))
# Filter out NA Population
medals_clean_pop <- medals_summary %>%
filter(!is.na(Population))
# Recalculate medal summary and keep GDP & Population
medals_summary <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country, Year) %>%
summarise(
Total_Medals = n(),
GDP = first(GDP),
Population = first(Population)
) %>%
ungroup()
# Filter out NA Population
medals_clean_pop <- medals_summary %>%
filter(!is.na(Population))
# Scatter plot with smooth line
ggplot(medals_clean_pop, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.4, color = "darkgreen") +
geom_smooth(method = "loess", se = FALSE, color = "black", size = 1.2) +
scale_x_log10() +
labs(
title = "Relationship between Population and Total Olympic Medals",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
# Filter out NA Population
medals_clean_pop <- medals_summary %>%
filter(!is.na(Population))
# Scatter plot with smooth line
ggplot(medals_clean_pop, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.4, color = "darkgreen") +
geom_smooth(method = "loess", se = FALSE, color = "black", size = 1.2) +
scale_x_log10() +
labs(
title = "Relationship between Population and Total Olympic Medals",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
medals_summary <- medals_summary %>%
mutate(PopulationRange = cut(Population,
breaks = c(0, 1e6, 1e7, 1e8, 1e9, Inf),
labels = c("≤1M", "1M–10M", "10M–100M", "100M–1B", ">1B")
))
ggplot(medals_summary, aes(x = PopulationRange, y = Total_Medals)) +
geom_boxplot(fill = "lightgreen") +
labs(
title = "Olympic Medals by Population Range",
x = "Population Range",
y = "Total Medals"
) +
theme_minimal()
ggplot(medals_summary, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.3, color = "darkgreen") +
geom_density2d(color = "black") +
scale_x_log10() +
labs(
title = "Population vs Olympic Medals (Density Overlay)",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal()
ggplot(medals_summary, aes(x = Population, y = Total_Medals)) +
geom_point(alpha = 0.1, color = "darkgreen", size = 1.5) +
geom_smooth(method = "loess", se = FALSE, color = "black", size = 2) +
scale_x_log10() +
labs(
title = "Relationship between Population and Total Olympic Medals",
x = "Population (log scale)",
y = "Total Medals"
) +
theme_minimal()
medals_summary <- medals_summary %>%
mutate(PopulationRange = cut(Population,
breaks = c(0, 1e6, 1e7, 1e8, 1e9, Inf),
labels = c("≤1M", "1M–10M", "10M–100M", "100M–1B", ">1B")
))
ggplot(medals_summary, aes(x = PopulationRange, y = Total_Medals)) +
geom_boxplot(fill = "lightgreen") +
labs(
title = "Olympic Medals by Population Range",
x = "Population Range",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Step 1: Filter out rows where Population is NA
medals_summary_clean <- medals_summary %>%
filter(!is.na(Population)) %>%
mutate(PopulationRange = cut(Population,
breaks = c(0, 1e6, 1e7, 1e8, 1e9, Inf),
labels = c("≤1M", "1M–10M", "10M–100M", "100M–1B", ">1B")
))
# Step 2: Boxplot with jitter points + Y axis limit
ggplot(medals_summary_clean, aes(x = PopulationRange, y = Total_Medals)) +
geom_boxplot(fill = "lightgreen", outlier.shape = NA) +  # avoid duplicate outliers
geom_jitter(width = 0.2, alpha = 0.3, color = "darkgreen") +
scale_y_continuous(limits = c(0, 400)) +
labs(
title = "Olympic Medals by Population Range",
x = "Population Range",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Step 1: Filter medals only
medals_country <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = mean(GDP, na.rm = TRUE),
Population = mean(Population, na.rm = TRUE)
) %>%
filter(!is.na(Population)) %>%
mutate(PopulationRange = cut(Population,
breaks = c(0, 1e6, 1e7, 1e8, 1e9, Inf),
labels = c("≤1M", "1M–10M", "10M–100M", "100M–1B", ">1B")
))
ggplot(medals_country, aes(x = PopulationRange, y = Total_Medals)) +
geom_boxplot(fill = "lightblue", outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.4, color = "blue") +
scale_y_continuous(limits = c(0, 400)) +
labs(
title = "Total Olympic Medals per Country by Population Range",
x = "Population Range",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Step 1: Filter medals only
medals_country <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = mean(GDP, na.rm = TRUE),
Population = mean(Population, na.rm = TRUE)
) %>%
filter(!is.na(Population)) %>%
mutate(PopulationRange = cut(Population,
breaks = c(0, 1e6, 1e7, 1e8, 1e9, Inf),
labels = c("≤1M", "1M–10M", "10M–100M", "100M–1B", ">1B")
))
ggplot(medals_country, aes(x = PopulationRange, y = Total_Medals)) +
geom_boxplot(fill = "lightblue", outlier.shape = NA) +
geom_jitter(width = 0.2, alpha = 0.4, color = "blue") +
scale_y_continuous(limits = c(0, 400)) +
labs(
title = "Total Olympic Medals per Country by Population Range",
x = "Population Range",
y = "Total Medals"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# 1. Summarise per country (total medals + avg GDP)
medals_by_gdp <- athletes_merged %>%
filter(!is.na(Medal)) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = mean(GDP, na.rm = TRUE)
) %>%
filter(!is.na(GDP))  # Remove countries with missing GDP
# 2. Scatter plot with smooth curve
ggplot(medals_by_gdp, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.4, color = "blue") +
geom_smooth(method = "loess", se = FALSE, color = "darkred", size = 1.2) +
scale_x_log10() +  # log scale for better readability
labs(
title = "Total Olympic Medals per Country vs. GDP per Capita",
x = "GDP per Capita (log scale)",
y = "Total Medals"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
