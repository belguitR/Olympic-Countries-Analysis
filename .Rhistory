# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
# Join GDP & Population again
medals_summary <- medals_cleaned %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year")) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = max(GDP, na.rm = TRUE),
Population = max(Population, na.rm = TRUE),
.groups = "drop"
)
# Check result
head(medals_summary)
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
# Join GDP & Population again
medals_summary <- medals_cleaned %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year")) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = max(GDP, na.rm = TRUE),
Population = max(Population, na.rm = TRUE),
.groups = "drop"
)
# Check result
head(medals_summary)
library(dplyr)
library(ggplot2)
# Clean the data
medals_clean <- medals_summary %>%
filter(
!is.na(GDP),
!is.na(Total_Medals),
)
ggplot(medals_clean, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "#00BFC4", size = 2) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "GDP per Capita vs Total Olympic Medals (Log Scale)",
x = "GDP per Capita (log scale)",
y = "Total Medals (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter out countries with missing population
medals_summary_normalized <- medals_summary %>%
filter(!is.na(Population), Population > 0) %>%
mutate(
Medals_per_Million = Total_Medals / (Population / 1e6),
Pop_Group = case_when(
Population < 1e7 ~ "Small (<10M)",
Population < 1e8 ~ "Medium (10M-100M)",
TRUE ~ "Large (>100M)"
)
)
ggplot(medals_summary_normalized, aes(x = Pop_Group, y = Medals_per_Million)) +
geom_boxplot(fill = "skyblue") +
scale_y_log10() +
labs(
title = "Medals per Million by Population Group",
x = "Population Group",
y = "Medals per Million (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
library(ggrepel)
top_medals <- medals_colored %>%
arrange(desc(Total_Medals)) %>%
slice_head(n = 10)
ggplot(medals_colored, aes(x = GDP, y = Total_Medals, color = Population)) +
geom_point(alpha = 0.8, size = 3) +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis_c(trans = "log10") +
geom_text_repel(data = top_medals, aes(label = Country), size = 3.2) +
labs(
title = "Top Medal Countries: GDP vs Medals",
x = "GDP per Capita (log scale)",
y = "Total Olympic Medals (log scale)",
color = "Population"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter out countries with missing population
medals_summary_normalized <- medals_summary %>%
filter(!is.na(Population), Population > 0) %>%
mutate(
Medals_per_Million = Total_Medals / (Population / 1e6),
Pop_Group = case_when(
Population < 1e7 ~ "Small (<10M)",
Population < 1e8 ~ "Medium (10M-100M)",
TRUE ~ "Large (>100M)"
)
)
ggplot(medals_summary_normalized, aes(x = Pop_Group, y = Medals_per_Million)) +
geom_boxplot(fill = "skyblue") +
scale_y_log10() +
labs(
title = "Medals per Million by Population Group",
x = "Population Group",
y = "Medals per Million (log scale)"
) +
theme_minimal()
system("git add .")
system('git commit -m "bug fix"')
system("git push ")
knitr::opts_chunk$set(echo = TRUE)
athletes <- read.csv("C:/Users/errmi/Desktop/MPSL/athlete_events.csv")
gdp <- read.csv("C:/Users/errmi/Desktop/MPSL/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_26433.csv", skip = 4)
population <- read.csv("C:/Users/errmi/Desktop/MPSL/API_SP.POP.TOTL_DS2_en_csv_v2_26346.csv", skip = 4)
athletes_clean <- athletes[, !(names(athletes) %in% c("Season", "Games"))]
head(athletes_clean)
library(tidyverse)
library(readr)
# GDP long format
gdp_long <- gdp %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "GDP") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Population long format
pop_long <- population %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Population") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Preview
head(gdp_long)
head(pop_long)
# Get list of valid countries from GDP and Population datasets
valid_countries <- union(gdp_long$Country, pop_long$Country) %>% unique()
# Prepare and merge only valid countries
athletes_merged <- athletes_clean %>%
rename(Country = Team) %>%
filter(Country %in% valid_countries) %>%
mutate(Year = as.integer(Year)) %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year"))
# Check result
head(athletes_merged)
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
athletes <- read.csv("C:/Users/errmi/Desktop/MPSL/athlete_events.csv")
gdp <- read.csv("C:/Users/errmi/Desktop/MPSL/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_26433.csv", skip = 4)
population <- read.csv("C:/Users/errmi/Desktop/MPSL/API_SP.POP.TOTL_DS2_en_csv_v2_26346.csv", skip = 4)
athletes_clean <- athletes[, !(names(athletes) %in% c("Season", "Games"))]
head(athletes_clean)
library(tidyverse)
library(readr)
# GDP long format
gdp_long <- gdp %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "GDP") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Population long format
pop_long <- population %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Population") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Preview
head(gdp_long)
head(pop_long)
# Get list of valid countries from GDP and Population datasets
valid_countries <- union(gdp_long$Country, pop_long$Country) %>% unique()
# Prepare and merge only valid countries
athletes_merged <- athletes_clean %>%
rename(Country = Team) %>%
filter(Country %in% valid_countries) %>%
mutate(Year = as.integer(Year)) %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year"))
# Check result
head(athletes_merged)
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
# Join GDP & Population again
medals_summary <- medals_cleaned %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year")) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = max(GDP, na.rm = TRUE),
Population = max(Population, na.rm = TRUE),
.groups = "drop"
)
# Check result
head(medals_summary)
library(dplyr)
library(ggplot2)
# Clean the data
medals_clean <- medals_summary %>%
filter(
!is.na(GDP),
!is.na(Total_Medals),
)
ggplot(medals_clean, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "#00BFC4", size = 2) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "GDP per Capita vs Total Olympic Medals (Log Scale)",
x = "GDP per Capita (log scale)",
y = "Total Medals (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter out countries with missing population
medals_summary_normalized <- medals_summary %>%
filter(!is.na(Population), Population > 0) %>%
mutate(
Medals_per_Million = Total_Medals / (Population / 1e6),
Pop_Group = case_when(
Population < 1e7 ~ "Small (<10M)",
Population < 1e8 ~ "Medium (10M-100M)",
TRUE ~ "Large (>100M)"
)
)
ggplot(medals_summary_normalized, aes(x = Pop_Group, y = Medals_per_Million)) +
geom_boxplot(fill = "skyblue") +
scale_y_log10() +
labs(
title = "Medals per Million by Population Group",
x = "Population Group",
y = "Medals per Million (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
library(ggrepel)
top_medals <- medals_colored %>%
arrange(desc(Total_Medals)) %>%
slice_head(n = 10)
ggplot(medals_colored, aes(x = GDP, y = Total_Medals, color = Population)) +
geom_point(alpha = 0.8, size = 3) +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis_c(trans = "log10") +
geom_text_repel(data = top_medals, aes(label = Country), size = 3.2) +
labs(
title = "Top Medal Countries: GDP vs Medals",
x = "GDP per Capita (log scale)",
y = "Total Olympic Medals (log scale)",
color = "Population"
) +
theme_minimal()
system ("git add .")
system('git commit -m "fixes' )
system ('git push')
knitr::opts_chunk$set(echo = TRUE)
athletes <- read.csv("C:/Users/errmi/Desktop/MPSL/athlete_events.csv")
gdp <- read.csv("C:/Users/errmi/Desktop/MPSL/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_26433.csv", skip = 4)
population <- read.csv("C:/Users/errmi/Desktop/MPSL/API_SP.POP.TOTL_DS2_en_csv_v2_26346.csv", skip = 4)
athletes_clean <- athletes[, !(names(athletes) %in% c("Season", "Games"))]
head(athletes_clean)
library(tidyverse)
library(readr)
# GDP long format
gdp_long <- gdp %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "GDP") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Population long format
pop_long <- population %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Population") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Preview
head(gdp_long)
head(pop_long)
# Get list of valid countries from GDP and Population datasets
valid_countries <- union(gdp_long$Country, pop_long$Country) %>% unique()
# Prepare and merge only valid countries
athletes_merged <- athletes_clean %>%
rename(Country = Team) %>%
filter(Country %in% valid_countries) %>%
mutate(Year = as.integer(Year)) %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year"))
# Check result
head(athletes_merged)
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
# Join GDP & Population again
medals_summary <- medals_cleaned %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year")) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = max(GDP, na.rm = TRUE),
Population = max(Population, na.rm = TRUE),
.groups = "drop"
)
# Check result
head(medals_summary)
library(dplyr)
library(ggplot2)
# Clean the data
medals_clean <- medals_summary %>%
filter(
!is.na(GDP),
!is.na(Total_Medals),
)
ggplot(medals_clean, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "#00BFC4", size = 2) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "GDP per Capita vs Total Olympic Medals (Log Scale)",
x = "GDP per Capita (log scale)",
y = "Total Medals (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter out countries with missing population
medals_summary_normalized <- medals_summary %>%
filter(!is.na(Population), Population > 0) %>%
mutate(
Medals_per_Million = Total_Medals / (Population / 1e6),
Pop_Group = case_when(
Population < 1e7 ~ "Small (<10M)",
Population < 1e8 ~ "Medium (10M-100M)",
TRUE ~ "Large (>100M)"
)
)
ggplot(medals_summary_normalized, aes(x = Pop_Group, y = Medals_per_Million)) +
geom_boxplot(fill = "skyblue") +
scale_y_log10() +
labs(
title = "Medals per Million by Population Group",
x = "Population Group",
y = "Medals per Million (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
library(ggrepel)
top_medals <- medals_colored %>%
arrange(desc(Total_Medals)) %>%
slice_head(n = 10)
ggplot(medals_colored, aes(x = GDP, y = Total_Medals, color = Population)) +
geom_point(alpha = 0.8, size = 3) +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis_c(trans = "log10") +
geom_text_repel(data = top_medals, aes(label = Country), size = 3.2) +
labs(
title = "Top Medal Countries: GDP vs Medals",
x = "GDP per Capita (log scale)",
y = "Total Olympic Medals (log scale)",
color = "Population"
) +
theme_minimal()
athletes <- read.csv("C:/Users/errmi/Desktop/MPSL/athlete_events.csv")
gdp <- read.csv("C:/Users/errmi/Desktop/MPSL/API_NY.GDP.PCAP.CD_DS2_en_csv_v2_26433.csv", skip = 4)
population <- read.csv("C:/Users/errmi/Desktop/MPSL/API_SP.POP.TOTL_DS2_en_csv_v2_26346.csv", skip = 4)
athletes_clean <- athletes[, !(names(athletes) %in% c("Season", "Games"))]
head(athletes_clean)
library(tidyverse)
library(readr)
# GDP long format
gdp_long <- gdp %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "GDP") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Population long format
pop_long <- population %>%
select(`Country.Name`, starts_with("X19"), starts_with("X20")) %>%
pivot_longer(cols = starts_with("X"), names_to = "Year", values_to = "Population") %>%
mutate(Year = as.integer(sub("X", "", Year))) %>%
rename(Country = `Country.Name`)
# Preview
head(gdp_long)
head(pop_long)
# Get list of valid countries from GDP and Population datasets
valid_countries <- union(gdp_long$Country, pop_long$Country) %>% unique()
# Prepare and merge only valid countries
athletes_merged <- athletes_clean %>%
rename(Country = Team) %>%
filter(Country %in% valid_countries) %>%
mutate(Year = as.integer(Year)) %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year"))
# Check result
head(athletes_merged)
# Total medals per country (across all years)
# Filter to real medals, deduplicate per medal event
medals_cleaned <- athletes_merged %>%
filter(!is.na(Medal)) %>%
distinct(Country, Year, Event, Medal, Sport)
# Join GDP & Population again
medals_summary <- medals_cleaned %>%
left_join(gdp_long, by = c("Country", "Year")) %>%
left_join(pop_long, by = c("Country", "Year")) %>%
group_by(Country) %>%
summarise(
Total_Medals = n(),
GDP = max(GDP, na.rm = TRUE),
Population = max(Population, na.rm = TRUE),
.groups = "drop"
)
# Check result
head(medals_summary)
library(dplyr)
library(ggplot2)
# Clean the data
medals_clean <- medals_summary %>%
filter(
!is.na(GDP),
!is.na(Total_Medals),
)
ggplot(medals_clean, aes(x = GDP, y = Total_Medals)) +
geom_point(alpha = 0.6, color = "#00BFC4", size = 2) +
scale_x_log10() +
scale_y_log10() +
labs(
title = "GDP per Capita vs Total Olympic Medals (Log Scale)",
x = "GDP per Capita (log scale)",
y = "Total Medals (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
# Filter out countries with missing population
medals_summary_normalized <- medals_summary %>%
filter(!is.na(Population), Population > 0) %>%
mutate(
Medals_per_Million = Total_Medals / (Population / 1e6),
Pop_Group = case_when(
Population < 1e7 ~ "Small (<10M)",
Population < 1e8 ~ "Medium (10M-100M)",
TRUE ~ "Large (>100M)"
)
)
ggplot(medals_summary_normalized, aes(x = Pop_Group, y = Medals_per_Million)) +
geom_boxplot(fill = "skyblue") +
scale_y_log10() +
labs(
title = "Medals per Million by Population Group",
x = "Population Group",
y = "Medals per Million (log scale)"
) +
theme_minimal()
library(ggplot2)
library(dplyr)
library(ggrepel)
top_medals <- medals_colored %>%
arrange(desc(Total_Medals)) %>%
slice_head(n = 10)
ggplot(medals_colored, aes(x = GDP, y = Total_Medals, color = Population)) +
geom_point(alpha = 0.8, size = 3) +
scale_x_log10() +
scale_y_log10() +
scale_color_viridis_c(trans = "log10") +
geom_text_repel(data = top_medals, aes(label = Country), size = 3.2) +
labs(
title = "Top Medal Countries: GDP vs Medals",
x = "GDP per Capita (log scale)",
y = "Total Olympic Medals (log scale)",
color = "Population"
) +
theme_minimal()
